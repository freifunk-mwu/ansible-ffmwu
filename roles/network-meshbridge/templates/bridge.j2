{% set _meshbridge_batif = item.id|string + 'bat' %}
{% set _bridge_ports = [] %}
{% do _bridge_ports.append(_meshbridge_batif) %}
{% if gw_meshbridge_ports[item.id] is defined and gw_meshbridge_ports[item.id] | length > 0 %}
{% for _meshbridge_interface in gw_meshbridge_ports[item.id] %}
{% do _bridge_ports.append(_meshbridge_interface) %}
{% endfor %}
{% endif %}
#
# {{ ansible_managed }}
#

auto {{ item.id }}br
iface {{ item.id }}br
    address {{ item.ipv4_network | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(magic) | ansible.utils.ipaddr('ip/prefix') }}
{% for prefix in item.ipv6_ula %}
    address {{ prefix | ansible.utils.ipaddr('net') | ansible.utils.ipsubnet(64, 0) | ansible.utils.ipaddr(magic) | ansible.utils.ipaddr('ip/prefix') }}
{% endfor %}
{% for prefix in item.ipv6_public %}
    address {{ prefix | ansible.utils.ipaddr('net') | ansible.utils.ipsubnet(64, 0) | ansible.utils.ipaddr(magic) | ansible.utils.ipaddr('ip/prefix') }}
{% endfor %}
{% if mesh_gw_prefixes is defined %}
{% for prefix in mesh_gw_prefixes[item.id].ipv6_public %}
    address {{ prefix | ansible.utils.ipaddr('net') | ansible.utils.ipsubnet(64, 0) | ansible.utils.ipaddr(1) | ansible.utils.ipaddr('ip/prefix') }}
{% endfor %}
{% endif %}
    bridge-ports {{ _bridge_ports | join(' ') }}
{% if server_type == 'gateway' %}
    ip-forward on
    ip6-forward on
{% endif %}

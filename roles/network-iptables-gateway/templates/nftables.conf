#!/usr/sbin/nft -f
{{ ansible_managed | comment }}

flush ruleset

table inet filter {
	chain INPUT {
		type filter hook input priority filter; policy accept;
		ct state established,related counter accept
	}

	chain FORWARD {
		type filter hook forward priority filter; policy accept;
{% for mesh_forward in meshes %}
{% for mesh_recursive in meshes recursive %}
{% if not mesh_forward.id == mesh_recursive.id %}
                iifname "{{ mesh_forward.id }}br" oifname "{{ mesh_recursive.id }}br" counter accept
{% endif %}
{% endfor %}
{% endfor %}
		ct state established,related counter accept
	}

	chain OUTPUT {
		type filter hook output priority filter; policy accept;
		ct state established,related counter accept
	}
}
table ip filter {
	chain INPUT {
		type filter hook input priority filter; policy accept;
		ip protocol gre ip daddr {{ ansible_default_ipv4.address }} counter accept
		ct state established,related counter accept
	}

	chain FORWARD {
		type filter hook forward priority filter; policy accept;
		ct state established,related counter accept
	}

	chain OUTPUT {
		type filter hook output priority filter; policy accept;
		ip protocol gre ip saddr {{ ansible_default_ipv4.address }} counter accept
		ct state established,related counter accept
	}
}
table ip mangle {
	chain PREROUTING {
		type filter hook prerouting priority mangle; policy accept;
	}

	chain INPUT {
		type filter hook input priority mangle; policy accept;
	}

	chain FORWARD {
		type filter hook forward priority mangle; policy accept;
	}

	chain OUTPUT {
		type route hook output priority mangle; policy accept;
	}

	chain POSTROUTING {
		type filter hook postrouting priority mangle; policy accept;
	}
}
table ip nat {
	chain PREROUTING {
		type nat hook prerouting priority dstnat; policy accept;
	}

	chain INPUT {
		type nat hook input priority 100; policy accept;
	}

	chain OUTPUT {
		type nat hook output priority -100; policy accept;
	}

	chain POSTROUTING {
		type nat hook postrouting priority srcnat; policy accept;
{% for mesh in meshes %}
                oifname "ffrl*" ip saddr {{ mesh.ipv4_network | ansible.utils.ipaddr('private') | ansible.utils.ipaddr('net') }} counter jump ffrl-nat
{% endfor %}
	}

	chain ffrl-nat {
		oifname "ffrl*" counter snat to {{ ffrl_public_ipv4_nat | ansible.utils.ipaddr('address') }}
	}
}
